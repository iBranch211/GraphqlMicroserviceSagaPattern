
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

input AddOrderInput {
  productId: String!
  userId: String!
}

type Mutation {
  createOrder(input: AddOrderInput!): OrderPurchase! @join__field(graph: ORDERS)
}

scalar OffsetDateTime

type OrderPurchase {
  id: ID!
  price: Float!
  productId: String!
  status: String!
  userId: String!
}

type Query {
  order(id: ID!): OrderPurchase! @join__field(graph: ORDERS)
  orders: [OrderPurchase!]! @join__field(graph: ORDERS)
  transaction(id: ID!): Transaction! @join__field(graph: PAYMENT)
  transactions: [Transaction!]! @join__field(graph: PAYMENT)
}

type Transaction {
  id: ID!
  orderId: String!
  price: Float!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ORDERS @join__graph(name: "orders" url: "http://localhost:8081/graphql")
  PAYMENT @join__graph(name: "payment" url: "http://localhost:8082/graphql")
}
